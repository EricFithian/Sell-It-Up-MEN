Sell-It-Up

Node - Environment(JS)
All of them
package.json - dependencies / module configuration
node_modules - all of the local depencies -express (pandora's box)

async / await - used in the controller 
    - making a call to the db takes time (async)
    - wait until process is complete (promise is 'resolved') and data is returned
    - async await | JS - special syntax for handling promises alternative to .then() / .catch()


try / catch 
    try - run your async code (if successful do X)
    catch - if something goes wrong - catch the error and do something else


Express - Express (Web Framework)
server.js 

    - entry point / starts the whole shebang
    - routes request 
    - imports / controllers
    - middleware
    - server initalizer (app.listen)

views - EJS (templates)
    - ejs 
    - app.set('view engine', 'ejs')
    - connect templates to our routes - display dynamic data (from DB)
    - after the HTML is generated by view template (EJS) - client receives  fully formatted HTML 

middleware - app.use()
    - methodOverride - override POST request to DELETE / PUT (update)
    - express.urlEncoded bodyParser - intercepts form data
    - express.static - pathing for static assets (css, js, img)
    - express.Router - resource router for each model 




Mongoose - "Controller" (DB) - ODM - Object Document Mapper 

req.params.productId - url data - finding specific resources (RESTful routes)

req.body - package of data from our EJS forms -> passed directly to create/update methods 

Mongoose Methods:
Index - db.SomeModel.find (all resources that match a query)
Create - db.SomeModel.create (adds a document to a collection)
Update - db.SomeModel.findByIdAndUpdate (finds doc by id  and modifies object values)

Delete - db.SomeModel.findByIdAndDelete ("")
Show - db.SomeModel.findById("") - locate resource by its unique ObjectId


// Data Associations

1. define your schemas
2. which model will store a reference to another model - one:many associations - store your object reference on the 'many'
    a. example - 1: Product  / M: Review (stores an objectId in a product field)

Artist / Song (artist)

3. Setup a testDB.js file > define both schemas create one Artist, grab their id > create Song
4. express / songs controller / artist controller



MongoDB - Database platform / MongoSh
DB - mongo atlas connection string
Collections - unique to each product
Documents - the actual data in your database (_id, ...key/values)